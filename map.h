#pragma once
#include <SFML\Graphics.hpp>
#include <iostream>
#include <fstream>
#include <list>
#include "cache.h"

using namespace sf;

const int resolution = 1280;
const float tile = float(resolution)/20;
const int Map_W = 20;
const int Map_H = 20;
const int Radius = 3;
const int Towers = 47;

struct Effective{
    int value;
    int y;
    int x;
};

class Map{
public:     
    Map(String File, std::unique_ptr<Cache>& cache);
    void Draw(RenderWindow &rw);
    void Read();
    void Write();
    void CountEffective(std::list<std::pair<int, int>> &EnemyPath1, std::list<std::pair<int, int>> &EnemyPath2, std::list<std::pair<int, int>> &EnemyPath3);
    void SortEffective();
    void Animation_Draw(RenderWindow &rw);
    void Animation_Update(float dt);
public:
    int Tiles[Map_H][Map_W]=
        {   
        {1,	1,	1,	1,	1,	1,	1,	1,	3,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
        {1,	1,	1,	1,	1,	1,	1,	1,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
        {1,	1,	1,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	3,	1},
        {1,	1,	1,	0,	1,	1,	0,	1,	0,	1,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1},
        {1,	1,	1,	0,	1,	1,	0,	1,	0,	1,	0,	1,	4,	4,	4,	4,	4,	4,	1,	1},
        {3,	0,	0,	0,	1,	1,	0,	1,	0,	1,	0,	1,	4,	4,	4,	4,	4,	4,	1,	1},
        {1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	1,	4,	4,	4,	4,	4,	4,	1,	1},
        {1,	1,	1,	1,	1,	1,	1,	1,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
        {1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1},
        {1,	0,	1,	1,	1,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	0,	1,	1,	1},
        {1,	0,	1,	4,	1,	0,	1,	1,	4,	4,	4,	4,	1,	0,	0,	0,	0,	1,	1,	1},
        {1,	0,	1,	4,	1,	0,	0,	1,	4,	4,	4,	4,	1,	0,	1,	1,	1,	1,	1,	1},
        {1,	0,	1,	4,	1,	1,	0,	1,	1,	4,	4,	4,	1,	0,	0,	0,	1,	4,	1,	1},
        {1,	0,	1,	4,	4,	1,	0,	0,	1,	4,	4,	4,	1,	1,	1,	0,	1,	4,	1,	1},
        {1,	0,	1,	4,	4,	1,	1,	0,	1,	4,	4,	4,	4,	4,	1,	0,	1,	4,	1,	1},
        {1,	0,	1,	1,	1,	1,	1,	0,	1,	1,	1,	1,	1,	1,	1,	0,	1,	1,	1,	1},
        {1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	1},
        {1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
        {1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1},
        {1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1}
    };
    int Foot_Tiles[Map_H][Map_W]=
        {
        {0, 0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
        {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0}
        
    };
    Effective effective_array[Towers];
private:
    Texture Map_Texture;
    Sprite Map_Sprite;

    Texture foot_Texture;
    Sprite foot_Sprite;

    std::vector<Texture> animation_texture;
    float totalTime = 0.0f, switchTime = 1.0f;
    int currentTexture = 0, textureCount = 2;
    Sprite animation_sprite;
};

